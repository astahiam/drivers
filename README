This is your new Drivers Play application
=========================================

This file will be packaged with your application when using `activator dist`.

There are several demonstration files available in this template.

Controllers
===========

- HomeController.scala:

  Shows how to handle simple HTTP requests.

- AsyncController.scala:

  Shows how to do asynchronous programming when handling a request.

- CountController.scala:

  Shows how to inject a component into a controller and use the component when
  handling requests.

Components
==========

- Module.scala:

  Shows how to use Guice to bind all the components needed by your application.

- Counter.scala:

  An example of a component that contains state, in this case a simple counter.

- ApplicationTimer.scala:

  An example of a component that starts when the application starts and stops
  when the application stops.

Filters
=======

- Filters.scala:

  Creates the list of HTTP filters used by your application.

- ExampleFilter.scala

  A simple filter that adds a header to every response.

Database
========
PostgreSQL with extension postgis, cube, and earthdistance.
The tables are: drivers and drivers_location
The SQL script located at conf/evolutions/default/1.sql and 2.sql

REST API
========
Where's my driver sample calls
GET localhost:9000/drivers?latitude=12.97161923&longitude=77.59463453
the radius and limit parameter is optional.

Update drivers location calls
PUT localhost:9000/drivers?driverId=104&latitude=12.97161923&longitude=77.59463452

Additional calls to get all drivers
GET localhost:9000/drivers/list

HOW TO RUN
==========
create the database : drivers
create extensions : postgis, cube, and earthdistance
type in the : activator run
if the evolutions script is not running well, please run the SQL script manually on postgreSQL or via PgAdmin
in the terminal or console applications, then try the API calls.

@copyright Ryan Kharisma Rakhmat.